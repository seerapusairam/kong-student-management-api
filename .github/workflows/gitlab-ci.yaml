name: Build, Push Custom Kong Image and Test Application

on:
  push:
    branches:
      - main

jobs:
  build-image-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/custom-kong:latest

  docker-build-test:
    runs-on: ubuntu-latest
    needs: build-image-push
    environment: pipeline
    steps:
    # Checkout the git repo
      - name: Check out
        uses: actions/checkout@v4

    #Install Docker-compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

    # Install decK
      - name: Install decK
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.13.0/deck_1.13.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C .
          sudo mv deck /usr/local/bin/

    # Replace build context with the newly built image
      - name: Update docker-compose with new image
        run: |
          sed -i '/build:/,+2c\    image: ghcr.io\/'"${{ github.repository }}"'\/custom-kong:latest' docker-compose.yml

    # Building and running the docker-compose
      - name: Run docker-compose
        run: |
          export URL=${{ secrets.URL }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export JWT_EXP=${{ secrets.JWT_EXP }}
          export PORT=${{ secrets.PORT }}
          export REDIS_URL=${{ secrets.REDIS_URL }}
          docker-compose up -d --build

    # Waiting for 15sec until the container is up running
      - name: Wait for Container to start
        run: sleep 15

    #To check all containers
      - name: Check running containers
        run: docker ps

    #To validate kong deck file
      - name: Validate Kong config
        run: deck validate --config kong.yaml

    # Sync Kong configuration
      - name: Run decK sync
        run: deck sync -s kong.yaml

    # Calling the route to check if the application was deployed properly
      - name: Curl health endpoint
        run: |
          curl -i -X POST http://localhost:8000/api/user/login \
          -H "Content-Type: application/json" \
          -H "X-Auth-Token: Qweasdzxc@123" \
          -d '{
                "email": "bhanu@gmail.com",
                "password": "password"
              }'

    # Removing container and image
      - name: Stop and remove containers
        if: always() # This ensures cleanup happens even if a step fails
        run: docker-compose down