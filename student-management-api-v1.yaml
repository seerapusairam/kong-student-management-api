openapi: 3.0.3
info:
  title: Student Management API
  version: 1.0.1
  description: |
    A RESTful API for managing students and users, exposed via a Kong API Gateway.
    The gateway provides centralized policy enforcement, including rate limiting, centralized logging, response transformation, and custom authentication plugins.
    The API itself is built with Node.js, Express.js, and MongoDB, supporting CRUD operations, JWT authentication filtering, sorting, and pagination.
servers:
  - url: http://localhost:8000
    description: Kong API Gateway
tags:
  - name: Students
    description: Operations related to student management
  - name: User
    description: User registration and authentication
paths:
  /api/user/register:
    post:
      tags: [User]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Login successful, returns Name and JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
  /api/user/login:
    post:
      tags: [User]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful, returns Name and JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid credentials
  /api/students:
    get:
      tags: [Students]
      summary: Get all students
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-Auth-Token
          required: true
          schema:
            type: string
          description: Custom authentication token for the custom plugin.
        - in: query
          name: grade
          schema:
            type: string
            example: ["A","B","C","D"]
          description: Filter by grade
        - in: query
          name: sort
          schema:
            type: string
          description: Sort by fields (comma separated, e.g. name,grade)
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit number of results
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentListResponse'
        '401':
          description: Unauthorized
    post:
      tags: [Students]
      summary: Add a new student
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCreate'
      responses:
        '201':
          description: Student created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /api/students/{id}:
    get:
      tags: [Students]
      summary: Get student by ID
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-Auth-Token
          required: true
          schema:
            type: string
          description: Custom authentication token for the custom plugin.
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "689667780e99b12a040c0a9"
          description: Student ID
      responses:
        '200':
          description: Student found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
        '401':
          description: Unauthorized
    put:
      tags: [Students]
      summary: Update student by ID
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-Auth-Token
          required: true
          schema:
            type: string
          description: Custom authentication token for the custom plugin.
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "689667780e99b12a040c0a9"
          description: Student ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentUpdate'
      responses:
        '200':
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
        '401':
          description: Unauthorized
    delete:
      tags: [Students]
      summary: Delete student by ID
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-Auth-Token
          required: true
          schema:
            type: string
          description: Custom authentication token for the custom plugin.
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "689667780e99b12a040c0a9"
          description: Student ID
      responses:
        '200':
          description: Student deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
        '401':
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-Auth-Token
  schemas:
    UserRegister:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          description: User's full name
          example: alice
        email:
          type: string
          description: User's email address
          example: student123@gmail.com
        password:
          type: string
          description: User's password
          example: yourpassword
    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          description: User's email address
          example: student123@gmail.com
        password:
          type: string
          description: User's password
          example: yourpassword
    UserResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the logged-in user
          example: studentname
        token:
          type: string
          description: JWT authentication token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Student:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier of the student
          example: "689667780e99b12a040c0a9"
        name:
          type: string
          description: Name of the student
          example: Alice
        grade:
          type: string
          description: Grade of the student (e.g., A, B, C, D, F)
          example: A
        createdBy:
          type: string
          description: User ID who created the student record
          example: "689667780e99b12a040c0a9"
    StudentCreate:
      type: object
      required: [name, grade]
      properties:
        name:
          type: string
          description: Name of the student
          example: Alice
        grade:
          type: string
          description: Grade of the student (e.g., A, B, C, D, F)
          example: A
    StudentUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the student
          example: Alice
        grade:
          type: string
          description: Grade of the student (e.g., A, B, C, D, F)
          example: B
    StudentListResponse:
      type: object
      properties:
        students:
          type: array
          description: List of student objects
          items:
            $ref: '#/components/schemas/Student'
        count:
          type: integer
          description: Total number of students
          example: 10
